error_log   error.log;
pid         nginx.pid;

worker_processes 1;
events {
  worker_connections 1024;
}

http {
  tcp_nopush            on;
  tcp_nodelay           on;
  keepalive_timeout     65;
  types_hash_max_size   2048;

  server {
    listen        localhost:8080;
    listen        *:8080;
    server_name   "lua-server";
    charset       utf-8;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    access_log    access.log;

    location /lua {
      default_type  application/lua;
      root          /;
      set           $target   "";
      access_by_lua '
        local name = ngx.var.uri:match "/lua/(.*)"
        local filename = package.searchpath (name, "./?.lua")
        if filename then
          ngx.var.target = filename
        else
          ngx.log (ngx.ERR, "failed to locate lua module: " .. name)
          return ngx.exit (404)
        end
      ';
      try_files     $target =404;
    }

    location /luaset {
      default_type  application/json;
      access_by_lua '
        ngx.req.read_body ()
        local body    = ngx.req.get_body_data ()
        local json    = require "cjson"
        local http    = require "resty.http"
        local data    = json.decode (body)
        local result  = {}
        for k, t in pairs (data) do
          local hc  = http:new ()
          local url = "http://127.0.0.1:8080/lua/" .. k
          local res, err = hc:request_uri (url, {
            method = "GET",
            headers = {
              ["If-None-Match"] = type (t) == "table" and t.etag,
            },
          })
          if not res then
            ngx.log (ngx.ERR, "failed to request: " .. err)
            return
          end
          if res.status == 200 then
            result [k] = {
              lua  = res.body,
              etag = res.headers.etag:match [[^"([^"]+)"$]],
            }
          elseif res.status == 304 then
            result [k] = {}
          elseif res.status == 404 then
            result [k] = nil
          end
        end
        ngx.say (json.encode (result))
      ';
    }
  }
}
